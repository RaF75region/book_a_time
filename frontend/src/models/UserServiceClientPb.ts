/**
 * @fileoverview gRPC-Web generated client stub for user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.1
// source: user.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as user_pb from './user_pb'; // proto import: "user.proto"


export class UserRequestsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddUser = new grpcWeb.MethodDescriptor(
    '/user.UserRequests/AddUser',
    grpcWeb.MethodType.UNARY,
    user_pb.User,
    user_pb.Reply,
    (request: user_pb.User) => {
      return request.serializeBinary();
    },
    user_pb.Reply.deserializeBinary
  );

  addUser(
    request: user_pb.User,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.Reply>;

  addUser(
    request: user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.Reply) => void): grpcWeb.ClientReadableStream<user_pb.Reply>;

  addUser(
    request: user_pb.User,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserRequests/AddUser',
        request,
        metadata || {},
        this.methodDescriptorAddUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserRequests/AddUser',
    request,
    metadata || {},
    this.methodDescriptorAddUser);
  }

  methodDescriptorUpdateUserType = new grpcWeb.MethodDescriptor(
    '/user.UserRequests/UpdateUserType',
    grpcWeb.MethodType.UNARY,
    user_pb.ChangeUserType,
    user_pb.Reply,
    (request: user_pb.ChangeUserType) => {
      return request.serializeBinary();
    },
    user_pb.Reply.deserializeBinary
  );

  updateUserType(
    request: user_pb.ChangeUserType,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.Reply>;

  updateUserType(
    request: user_pb.ChangeUserType,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.Reply) => void): grpcWeb.ClientReadableStream<user_pb.Reply>;

  updateUserType(
    request: user_pb.ChangeUserType,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserRequests/UpdateUserType',
        request,
        metadata || {},
        this.methodDescriptorUpdateUserType,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserRequests/UpdateUserType',
    request,
    metadata || {},
    this.methodDescriptorUpdateUserType);
  }

  methodDescriptorGetUserForId = new grpcWeb.MethodDescriptor(
    '/user.UserRequests/GetUserForId',
    grpcWeb.MethodType.UNARY,
    user_pb.GetUser,
    user_pb.Reply,
    (request: user_pb.GetUser) => {
      return request.serializeBinary();
    },
    user_pb.Reply.deserializeBinary
  );

  getUserForId(
    request: user_pb.GetUser,
    metadata?: grpcWeb.Metadata | null): Promise<user_pb.Reply>;

  getUserForId(
    request: user_pb.GetUser,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_pb.Reply) => void): grpcWeb.ClientReadableStream<user_pb.Reply>;

  getUserForId(
    request: user_pb.GetUser,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_pb.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/user.UserRequests/GetUserForId',
        request,
        metadata || {},
        this.methodDescriptorGetUserForId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/user.UserRequests/GetUserForId',
    request,
    metadata || {},
    this.methodDescriptorGetUserForId);
  }

}

